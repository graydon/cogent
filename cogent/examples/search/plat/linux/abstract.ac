/*
 * Copyright 2017, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

$ty:(RR SysState (#CString, Index) ErrCode) deserialise_CString ($ty:((SysState, Buffer!, Index, U32)) args) {
  deserialise_CString_ret ret;
  char* dst = malloc (sizeof (char) * args.p4);
  memcpy (dst, args.p2 + args.p3, args.p4);
  ret.p1 = args.p1;
  ret.p2.tag = TAG_ENUM_Success;
  $ty:(#CString) wa = dst;
  ret.p2.Success.p1 = wa;
  ret.p2.Success.p2 = args.p3 + args.p4 * sizeof (char);
  return ret;
}

// can this function ever fail due to going out of buffer range???
$ty:((SysState, U32, Index)) deserialise_U32 ($ty:((SysState, Buffer!, Index)) args) {
  $ty:((SysState, U32, Index)) ret;
  ret.p1 = args.p1;
  ret.p2 = ((char*)args.p2)[args.p3];
  ret.p3 = args.p3 + sizeof ($ty:(U32));
  return ret;
}

$ty:(RR SysState (Node take (..)) ErrCode) malloc_Node ($ty:(SysState) args) {
  $ty:(RR SysState (Node take (..)) ErrCode) ret;
  $ty:(Node take (..)) node = malloc (sizeof ($ty:(Node)));
  ret.p1 = args;
  if (node) {
    ret.p2.tag = TAG_ENUM_Success;
    ret.p2.Success = node;
  } else {
    ret.p2.tag = TAG_ENUM_Error;
    ret.p2.Error = 1;
  }
  return ret;
}

$ty:(SysState) free_Node ($ty:((SysState, Node take (..))) args) {
  $ty:(SysState) ret = args.p1;
  free (args.p2);
  return ret;
}

$ty:(SysState) free_CString ($ty:((SysState, #CString)) args) {
  $ty:(SysState) ret = args.p1;
  free (args.p2);
  return ret;
}

$ty:(Bool) string_cmp ($ty:(((#CString)!, (#CString)!)) args) {
  // printf ("Comparing: %s ?== %s\n", args.p1, args.p2);
  int r = strcmp (args.p1, args.p2);
  if (r == 0)  return $exp:(True);
    else return $exp:(False);
}

$ty:(SysState) array_print ($ty:((SysState, (#CString)!)) args) {
  printf ("%s", args.p2);
  return (args.p1);
}
